name: Azure Pipelines
variables:
  python.version: "3.7.6"
stages:
  - stage: Build
    jobs:
      - job: Build
        pool:
          name: Hosted Ubuntu 1604
        steps:
          - task: InstallSSHKey@0
            inputs:
              knownHostsEntry: "ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=="
              sshPublicKey: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCxk0N0whzgiOTrcAdHsjgfCr4+LkO7D2mo9/dDJ+Nz/wf2c+V8HYy0U4xXGoYSbGBCfjHNZzj7vmHP3nhNMabWVALOjjGDyTnb/F+hkpiwfp6vwXjjrLcyvoFv9J8VnPZXVMuA2vveVckkrAbo+a2/u425v55KWkqqNuzJIDEVT8/1FJefaE6LK/NMo1zswlGUxDn2+o2pEDGRc2S/2B/s9I0RVPFpaqVFWNnF/JmtOhetWhwZbHvXof3tXcIo6LzY2NET3FyES5TlOMhLdJaKWssAGsZfM8Nfo92yZ0LNAk8V2o4S8RCFYIiABi5yvxs4N1/Cz4uEbqnF/wF+t4N5"
              sshKeySecureFile: "id_rsa"

          - task: ArchiveFiles@2
            displayName: "Archive FakeRestAPI"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/fakerestapi"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: '$(Build.BuildId)-fakerestapi.zip'

          - task: PublishPipelineArtifact@1
            displayName: "Upload farestapi Package"
            inputs:
              targetPath: $(Build.BuildId)-fakerestapi.zip
              artifactName: drop-fakerestapi

          - task: ArchiveFiles@2
            displayName: "Archive Selenium UI Tests"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/selenium"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: '$(Build.BuildId)/selenium-tests.zip'
              replaceExistingArchive: true
          - upload: $(Build.BuildId)/selenium-tests.zip
            artifact: selenium
    
  - stage: WebAppDeployment
    displayName: Web App Deployment
    jobs:
    - deployment: FakeRestAPI
      pool:
        vmImage: 'Ubuntu-18.04'
      environment: 'WEBAPP-TEST'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureWebApp@1
              displayName: 'Deploy Azure Web App'
              inputs:
                azureSubscription: 'e62bbea0-5e9d-4923-ae2d-1e2735ea5e1e'
                appType: 'webAppLinux'
                appName: 'jc-test-AppService'
                package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
                deploymentMethod: 'auto'

    - deployment: VMDeploy
      displayName: VM Deploy
      environment:
        name:  'VM-TEST'
        resourceType: VirtualMachine
      strategy:
        runOnce:
          deploy:
            steps:
            - task: Bash@3
              displayName: 'Install Dependencies'
              inputs:
                targetType: 'inline'
                script: |
                  #! /bin/bash
                  
                  # sudo apt-get upgrade -y
                  # sudo apt-get install python3-pip -y
                  # sudo apt-get install unzip -y
                  # sudo apt-get install -y chromium-browser
                  # pip3 install selenium
                  
                  # download chrome driver v89
                  FILE=chromedriver_linux64.zip
                  if [ -f "$FILE" ]; then
                    echo "$FILE exists."
                  else
                    wget https://chromedriver.storage.googleapis.com/89.0.4389.23/chromedriver_linux64.zip
                  fi
                  # install chrome driver
                  unzip chromedriver_linux64.zip
                  sudo mv chromedriver /usr/bin/chromedriver
                  sudo chown root:root /usr/bin/chromedriver
                  sudo chmod +x /usr/bin/chromedriver
                  chromium-browser -version
                  chromedriver --version
                  # agent log analytics
                  wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w 5c9b651a-3c93-46b7-8674-5d2cf2ad0e75 -s apaaCBe3AAFQkC3vUig+WFesWkbP4T+/as1Q9AA2XNX1nf5STgdLOzdZTrf8PEYAhAWPhZU5Mu3Ka/778FlRZg== -d opinsights.azure.com
                  sudo /opt/microsoft/omsagent/bin/service_control restart 5c9b651a-3c93-46b7-8674-5d2cf2ad0e75
            - download: current
              displayName: 'Download Selenium'
              artifact: selenium
            - task: Bash@3
              displayName: UI Tests
              inputs:
                targetType: 'inline'
                script: |
                  unzip -o $(Pipeline.Workspace)/selenium/selenium-tests.zip -d .
                  sudo mkdir /var/logs
                  python3 uitests.py > ui-logs.log
                  sudo mv ui-logs.log /var/logs
                  
  - stage: UITests
    displayName: UI Tests
    jobs:
    - deployment: VMRunUITests
      displayName: Run UI Tests
      environment:
        name:  'VM-TEST'
        resourceType: VirtualMachine
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              displayName: 'Download Selenium'
              artifact: selenium
            - task: Bash@3
              displayName: UI Tests
              inputs:
                targetType: 'inline'
                script: |
                  unzip -o $(Pipeline.Workspace)/selenium/selenium-tests.zip -d .
                  sudo mkdir /var/logs
                  python3 uitests.py > ui-logs.log
                  cat ui-logs.log
                  sudo mv ui-logs.log /var/logs


  - stage: IntegrationTests
    displayName: Integration Tests
    jobs:
    - job: PostmanTests
      displayName: Postman Tests
      steps: 
      - task: NodeTool@0
        displayName: Install Node v12.X
        inputs:
          versionSpec: '12.x'
      - task: CmdLine@2
        displayName: Install Newman
        inputs:
          script: 'npm install newman'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
      - task: CmdLine@2
        displayName: Run Regression Tests
        inputs:
          script: 'newman run postman/Regression_Test_Suite.postman_collection.json -e postman/Test_Suite.postman_environment.json --delay-request 5000 --bail newman -x --reporters cli,junit --reporter-junit-export Results/RegressionTests.xml'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
        continueOnError: true
      - task: CmdLine@2
        displayName: Run Data Validation Tests
        inputs:
          script: 'newman run postman/Data_Validation_Test_Suite.postman_collection.json -e postman/Data_Validation_Test_Suite.postman_environment.json --delay-request 5000 --bail newman -x --reporters cli,junit --reporter-junit-export Results/DataValidationTests.xml'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
        continueOnError: true
      - task: CmdLine@2
        inputs:
          script: 'ls'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
      - task: PublishTestResults@2
        displayName: Publish Test Reports
        condition: always()
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '$(System.DefaultWorkingDirectory)/Results/*.xml'

  - stage: JMeterTests
    displayName: JMeter Tests
    jobs:
    - job: JMeterTests
      displayName: JMeterTests
      steps: 

      - task: JMeterInstaller@0
        displayName: 'Install JMeter 5.2.1'
        inputs:
          jmeterVersion: '5.2.1'

      - task: Bash@3
        displayName: 'Endurance Test Suite'
        inputs:
          targetType: 'inline'
          script: 'jmeter -n -t jmeter/EnduranceTestSuite.jmx  -l endurance-test-report/endurance-results.jtl  -e -o endurance-test-report'
      
      - task: publishhtmlreport@1
        displayName: 'Publish Endurance Test Results'
        inputs:
          htmlType: 'Jmeter'
          JmeterReportsPath: '$(Build.SourcesDirectory)/endurance-test-report'
      
      - task: Bash@3
        displayName: 'Stress Test Suite'
        inputs:
          targetType: 'inline'
          script: 'jmeter -n -t jmeter/StressTestSuite.jmx  -l stress-test-report/stress-results.jtl -e -o stress-test-report'
      
      - task: publishhtmlreport@1
        displayName: 'Publish Endurance Test Results'
        inputs:
          htmlType: 'Jmeter'
          JmeterReportsPath: '$(Build.SourcesDirectory)/stress-test-report'
      
      - task: Bash@3
        displayName: 'Print Performance Test Logs'
        inputs:
          targetType: 'inline'
          script: |
              ls -lah endurance-test-report/
              ls -lah stress-test-report/
              cat jmeter.log

  - stage: Wait
    # Delay
    # Delay further execution of a workflow by 3minutes - to play with alerts and logs
    jobs:
      - job: RunsOnServer
        pool: Server
        steps:
        - task: Delay@1
          inputs:
            delayForMinutes: '3'